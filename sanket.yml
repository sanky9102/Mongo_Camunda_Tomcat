- name: Setup MongoDB
  hosts: servers
  become: yes
  vars_files:
    - vers.yml

  tasks:
    - name: Create directory for MongoDB installation
      ansible.builtin.file:
        path: "{{ mongodb_dir }}"
        state: directory
        mode: "0755"
        owner: inferyx
        group: inferyx

    - name: Ensure /data/db directory exists
      ansible.builtin.file:
        path: /data/db
        state: directory
        mode: "0755"
        owner: inferyx
        group: inferyx

    - name: Ensure MongoDB log directory exists
      ansible.builtin.file:
        path: "{{ mongodb_log_file | dirname }}"
        state: directory
        mode: "0755"
        owner: inferyx
        group: inferyx

    - name: Ensure MongoDB log file exists
      ansible.builtin.file:
        path: "{{ mongodb_log_file }}"
        state: touch
        mode: "0644"
        owner: inferyx
        group: inferyx

    - name: Check if MongoDB archive exists
      ansible.builtin.stat:
        path: "{{ mongodb_dir }}/mongodb-linux-x86_64-{{ mongodb_version }}.tgz"
      register: mongodb_archive

    - name: Install curl
      ansible.builtin.package:
        name: curl
        state: present

    - name: Download MongoDB archive with curl
      ansible.builtin.command:
        cmd: "{{ mongodb_url }}"
      when: not mongodb_archive.stat.exists

    - name: Extract MongoDB archive
      ansible.builtin.command:
        cmd: "tar -xvf {{ mongodb_dir }}/mongodb-linux-x86_64-{{ mongodb_version }}.tgz --directory {{ mongodb_dir }} --strip-components=1"
      args:
        creates: "{{ mongodb_dir }}/bin/mongod"

    - name: Ensure MongoDB binaries are executable
      ansible.builtin.file:
        path: "{{ mongodb_dir }}/bin/mongod"
        mode: '0755'
        owner: inferyx
        group: inferyx

    - name: Set MongoDB configuration parameters
      ansible.builtin.copy:
        content: |
          # mongod.conf
          # for documentation of all options, see:
          #   http://docs.mongodb.org/manual/reference/configuration-options/

          # Where and how to store data.
          storage:
            dbPath: {{ mongodb_dir }}
            journal:
              enabled: true
          # where to write logging data.
          systemLog:
            destination: file
            logAppend: true
            path: {{ mongodb_log_file }}
          # network interfaces
          net:
            port: {{ mongodb_port }}
            bindIp: 127.0.0.1
        dest: /etc/mongod.conf
        owner: inferyx
        group: inferyx

    - name: Create systemd service file for MongoDB
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=MongoDB Database Service
          After=network.target

          [Service]
          User=inferyx
          ExecStart={{ mongodb_dir }}/bin/mongod --config /etc/mongod.conf
          ExecReload=/bin/kill -HUP $MAINPID
          Restart=on-failure
          LimitNOFILE=64000

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/mongodb.service
        mode: '0644'
        owner: inferyx
        group: inferyx

    - name: Change ownership of MongoDB directories and files
      ansible.builtin.command:
        cmd: chown -R inferyx:inferyx {{ mongodb_dir }} /data/db /etc/systemd/system/mongodb.service /var/log/mongodb/mongod.log /etc/mongod.conf

    - name: Change permissions of MongoDB directories and files
      ansible.builtin.command:
        cmd: chmod -R u+x {{ mongodb_dir }} /data/db /etc/systemd/system/mongodb.service /var/log/mongodb/mongod.log /etc/mongod.conf

    - name: Reload systemd daemon
      ansible.builtin.command:
        cmd: systemctl daemon-reload

    - name: Start MongoDB service
      ansible.builtin.service:
        name: mongodb
        state: started
        enabled: yes

    - name: Create symbolic link for MongoDB binaries
      ansible.builtin.file:
        src: "{{ mongodb_dir }}/bin/mongo"
        dest: "/usr/local/bin/mongo"
        state: link

    - name: Verify MongoDB client installation
      ansible.builtin.command:
        cmd: mongo --version
      register: mongo_version

    - name: Print MongoDB client version
      ansible.builtin.debug:
        msg: "MongoDB client version: {{ mongo_version.stdout }}"

    - name: Check if MongoDB admin user exists
      ansible.builtin.command:
        cmd: >
          mongo {{ mongodb_database }} --quiet --eval '
          db.getSiblingDB("admin").getUser("{{ mongodb_user }}")'
      register: user_check
      failed_when: false

    - name: Create MongoDB admin user
      ansible.builtin.command:
        cmd: >
          mongo {{ mongodb_database }} --eval 'db.createUser({
            user: "{{ mongodb_user }}",
            pwd: "{{ mongodb_user_password }}",
            roles: [
              { role: "read", db: "admin" },
              { role: "readWrite", db: "admin" },
              { role: "dbAdmin", db: "admin" }
            ]
          })'
      when: user_check.stdout == "null"
      register: create_user

    - name: Print MongoDB user creation output
      ansible.builtin.debug:
        msg: "MongoDB user creation output: {{ create_user.stdout }}"
      when: user_check.stdout == "null"
